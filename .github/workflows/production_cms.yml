name: Build and Push Docker Containers

on:
  release:
    types: 
      - never # Only trigger on published releases

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME_WEB: ${{ toLower(github.repository) }}/web
      IMAGE_NAME_CMS: ${{ toLower(github.repository) }}/cms
      IMAGE_NAME_NGINX: ${{ toLower(github.repository) }}/nginx
      IMAGE_TAG: ${{ github.event.release.tag_name }} # Use the release tag name as the image tag

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-cache-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            docker-cache-${{ github.ref }}-
            docker-cache-

      - name: Build & Push Web Container
        run: |
          docker build \
            -f ./web/Dockerfile \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}:${{ env.IMAGE_TAG }} \
            ./web
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}:${{ env.IMAGE_TAG }}

      - name: Build & Push CMS Container
        run: |
          docker build \
            -f ./cms/Dockerfile \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CMS }}:${{ env.IMAGE_TAG }} \
            ./cms
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CMS }}:${{ env.IMAGE_TAG }}

      - name: Build & Push NGINX Container
        run: |
          docker build \
            -f ./nginx/Dockerfile \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_NGINX }}:${{ env.IMAGE_TAG }} \
            ./nginx
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_NGINX }}:${{ env.IMAGE_TAG }}

      - name: Clean up Docker images
        run: docker system prune -f --volumes
